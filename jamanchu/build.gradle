plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

repositories {
	mavenCentral()
}

bootJar.enabled = false
jar.enabled = true

subprojects {
	group = 'com.recipe.jamanchu'
	version = '0.0.1-SNAPSHOT'

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(17)
		}
	}

	apply plugin : 'java'
	apply plugin : 'java-library'
	apply plugin : 'org.springframework.boot'
	apply plugin : 'io.spring.dependency-management'
	apply plugin : 'jacoco'

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		// Spring Web
		implementation 'org.springframework.boot:spring-boot-starter-web'

		// JPA
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

		// Validation
		implementation 'org.springframework.boot:spring-boot-starter-validation'

		// Lombok
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'

		// QueryDSL
		implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
		annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
		annotationProcessor "jakarta.annotation:jakarta.annotation-api"
		annotationProcessor "jakarta.persistence:jakarta.persistence-api"

		// Spring Security
		implementation 'org.springframework.boot:spring-boot-starter-security'

		// Mysql
		runtimeOnly 'com.mysql:mysql-connector-j'

		// AWS S3
		implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

		// Test
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.springframework.security:spring-security-test'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	}

	test {
		useJUnitPlatform()
	}
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes : [
							'com/recipe/jamanchu/JamanchuApplication.class',
							'com/recipe/jamanchu/exceptions/**',
							'com/recipe/jamanchu/util/**',
							'com/recipe/jamanchu/model/type/**',
							'com/recipe/jamanchu/model/dto/response/**',
							'com/recipe/jamanchu/notify/**'
					])
				})
		)
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'

			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}
		}
	}
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes : [
							'com/recipe/jamanchu/JamanchuApplication.class',
							'com/recipe/jamanchu/exceptions/**',
							'com/recipe/jamanchu/util/**',
							'com/recipe/jamanchu/model/type/**',
							'com/recipe/jamanchu/model/dto/response/**',
							'com/recipe/jamanchu/notify/**'
					])
				})
		)
	}
}

tasks.test {
	finalizedBy jacocoTestReport // 테스트가 끝난 후에 JaCoCo 리포트 생성
}
